--altmult_add ADDNSUB_MULTIPLIER_PIPELINE_REGISTER1="UNREGISTERED" ADDNSUB_MULTIPLIER_PIPELINE_REGISTER3="UNREGISTERED" ADDNSUB_MULTIPLIER_REGISTER1="UNREGISTERED" ADDNSUB_MULTIPLIER_REGISTER3="UNREGISTERED" CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Stratix IV" DSP_BLOCK_BALANCING="Auto" INPUT_REGISTER_A0="UNREGISTERED" INPUT_REGISTER_A1="UNREGISTERED" INPUT_REGISTER_A2="UNREGISTERED" INPUT_REGISTER_A3="UNREGISTERED" INPUT_REGISTER_B0="UNREGISTERED" INPUT_REGISTER_B1="UNREGISTERED" INPUT_REGISTER_B2="UNREGISTERED" INPUT_REGISTER_B3="UNREGISTERED" MULTIPLIER1_DIRECTION="SUB" MULTIPLIER_REGISTER0="UNREGISTERED" MULTIPLIER_REGISTER1="UNREGISTERED" NUMBER_OF_MULTIPLIERS=2 OUTPUT_REGISTER="UNREGISTERED" REPRESENTATION_A="SIGNED" REPRESENTATION_B="SIGNED" SIGNED_PIPELINE_REGISTER_A="UNREGISTERED" SIGNED_PIPELINE_REGISTER_B="UNREGISTERED" SIGNED_REGISTER_A="UNREGISTERED" SIGNED_REGISTER_B="UNREGISTERED" WIDTH_A=32 WIDTH_B=32 WIDTH_RESULT=32 ZERO_CHAINOUT_OUTPUT_REGISTER="UNREGISTERED" ZERO_LOOPBACK_OUTPUT_REGISTER="UNREGISTERED" ZERO_LOOPBACK_PIPELINE_REGISTER="UNREGISTERED" ZERO_LOOPBACK_REGISTER="UNREGISTERED" dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 20.1 cbx_alt_ded_mult_y 2020:11:11:17:06:45:SJ cbx_altera_mult_add 2020:11:11:17:06:45:SJ cbx_altera_mult_add_rtl 2020:11:11:17:06:45:SJ cbx_altmult_add 2020:11:11:17:06:45:SJ cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_mult 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_padd 2020:11:11:17:06:46:SJ cbx_parallel_add 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ cbx_util_mgl 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION add_sub_aqe (add_sub, dataa[64..0], datab[64..0])
RETURNS ( result[64..0]);
FUNCTION stratixiv_mac_mult (aclr[3..0], clk[3..0], dataa[dataa_width-1..0], datab[datab_width-1..0], ena[3..0], signa, signb)
WITH ( dataa_clear, dataa_clock, dataa_width, datab_clear, datab_clock, datab_width, scanouta_clear, scanouta_clock, signa_clear, signa_clock, signa_internally_grounded, signb_clear, signb_clock, signb_internally_grounded)
RETURNS ( dataout[dataa_width+datab_width-1..0], scanouta[dataa_width-1..0]);
FUNCTION stratixiv_mac_out (aclr[3..0], chainin[chainin_width-1..0], clk[3..0], dataa[dataa_width-1..0], datab[datab_width-1..0], datac[datac_width-1..0], datad[datad_width-1..0], ena[3..0], rotate, round, roundchainout, saturate, saturatechainout, shiftright, signa, signb, zeroacc, zerochainout, zeroloopback)
WITH ( acc_adder_operation, chainin_width = 1, dataa_width = 1, datab_width = 1, datac_width = 1, datad_width = 1, dataout_width = 72, first_adder0_clear, first_adder0_clock, first_adder0_mode, first_adder1_clear, first_adder1_clock, first_adder1_mode, multa_signa_internally_grounded, multa_signb_internally_grounded, multb_signa_internally_grounded, multb_signb_internally_grounded, multc_signa_internally_grounded, multc_signb_internally_grounded, multd_signa_internally_grounded, multd_signb_internally_grounded, operation_mode, output_clear, output_clock, rotate_clear, rotate_clock, rotate_output_clear, rotate_output_clock, rotate_pipeline_clear, rotate_pipeline_clock, round_chain_out_mode, round_chain_out_width, round_clear, round_clock, round_mode, round_pipeline_clear, round_pipeline_clock, round_width, roundchainout_clear, roundchainout_clock, roundchainout_output_clear, roundchainout_output_clock, roundchainout_pipeline_clear, roundchainout_pipeline_clock, saturate_chain_out_mode, saturate_chain_out_width, saturate_clear, saturate_clock, saturate_mode, saturate_pipeline_clear, saturate_pipeline_clock, saturate_width, saturatechainout_clear, saturatechainout_clock, saturatechainout_output_clear, saturatechainout_output_clock, saturatechainout_pipeline_clear, saturatechainout_pipeline_clock, second_adder_clear, second_adder_clock, shiftright_clear, shiftright_clock, shiftright_output_clear, shiftright_output_clock, shiftright_pipeline_clear, shiftright_pipeline_clock, signa_clear, signa_clock, signa_pipeline_clear, signa_pipeline_clock, signb_clear, signb_clock, signb_pipeline_clear, signb_pipeline_clock, zeroacc_clear, zeroacc_clock, zeroacc_pipeline_clear, zeroacc_pipeline_clock, zerochainout_output_clear, zerochainout_output_clock, zeroloopback_clear, zeroloopback_clock, zeroloopback_output_clear, zeroloopback_output_clock, zeroloopback_pipeline_clear, zeroloopback_pipeline_clock)
RETURNS ( dataout[dataout_width-1..0], dftout, loopbackout[17..0], overflow, saturatechainoutoverflow);

--synthesis_resources = dsp_18bit 8 
SUBDESIGN mult_add_5oi3
( 
	dataa[63..0]	:	input;
	datab[63..0]	:	input;
	result[31..0]	:	output;
) 
VARIABLE 
	add_sub11 : add_sub_aqe;
	mac_mult1 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18
		);
	mac_mult2 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18,
			signa_internally_grounded = "true"
		);
	mac_mult3 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18,
			signb_internally_grounded = "true"
		);
	mac_mult4 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18,
			signa_internally_grounded = "true",
			signb_internally_grounded = "true"
		);
	mac_mult6 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18
		);
	mac_mult7 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18,
			signa_internally_grounded = "true"
		);
	mac_mult8 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18,
			signb_internally_grounded = "true"
		);
	mac_mult9 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18,
			signa_internally_grounded = "true",
			signb_internally_grounded = "true"
		);
	mac_out10 : stratixiv_mac_out
		WITH (
			dataa_width = 36,
			datab_width = 36,
			datac_width = 36,
			datad_width = 36,
			dataout_width = 72,
			operation_mode = "36_bit_multiply"
		);
	mac_out5 : stratixiv_mac_out
		WITH (
			dataa_width = 36,
			datab_width = 36,
			datac_width = 36,
			datad_width = 36,
			dataout_width = 72,
			operation_mode = "36_bit_multiply"
		);
	aclr0	: NODE;
	aclr1	: NODE;
	aclr2	: NODE;
	aclr3	: NODE;
	clock0	: NODE;
	clock1	: NODE;
	clock2	: NODE;
	clock3	: NODE;
	ena0	: NODE;
	ena1	: NODE;
	ena2	: NODE;
	ena3	: NODE;
	global_gnd	: WIRE;
	global_vcc	: WIRE;
	sb_reg[0..0]	: WIRE;
	w86w[64..0]	: WIRE;

BEGIN 
	add_sub11.add_sub = global_gnd;
	add_sub11.dataa[] = ( ((global_vcc # sb_reg[]) & mac_out5.dataout[71..71]), mac_out5.dataout[71..8]);
	add_sub11.datab[] = ( ((global_vcc # sb_reg[]) & mac_out10.dataout[71..71]), mac_out10.dataout[71..8]);
	mac_mult1.aclr[] = ( aclr3, aclr2, aclr1, aclr0);
	mac_mult1.clk[] = ( clock3, clock2, clock1, clock0);
	mac_mult1.dataa[17..0] = dataa[31..14];
	mac_mult1.datab[17..0] = datab[31..14];
	mac_mult1.ena[] = ( ena3, ena2, ena1, ena0);
	mac_mult1.signa = B"1";
	mac_mult1.signb = B"1";
	mac_mult2.aclr[] = ( aclr3, aclr2, aclr1, aclr0);
	mac_mult2.clk[] = ( clock3, clock2, clock1, clock0);
	mac_mult2.dataa[] = ( dataa[13..0], B"0000");
	mac_mult2.datab[17..0] = datab[31..14];
	mac_mult2.ena[] = ( ena3, ena2, ena1, ena0);
	mac_mult2.signa = B"1";
	mac_mult2.signb = B"1";
	mac_mult3.aclr[] = ( aclr3, aclr2, aclr1, aclr0);
	mac_mult3.clk[] = ( clock3, clock2, clock1, clock0);
	mac_mult3.dataa[17..0] = dataa[31..14];
	mac_mult3.datab[] = ( datab[13..0], B"0000");
	mac_mult3.ena[] = ( ena3, ena2, ena1, ena0);
	mac_mult3.signa = B"1";
	mac_mult3.signb = B"1";
	mac_mult4.aclr[] = ( aclr3, aclr2, aclr1, aclr0);
	mac_mult4.clk[] = ( clock3, clock2, clock1, clock0);
	mac_mult4.dataa[] = ( dataa[13..0], B"0000");
	mac_mult4.datab[] = ( datab[13..0], B"0000");
	mac_mult4.ena[] = ( ena3, ena2, ena1, ena0);
	mac_mult4.signa = B"1";
	mac_mult4.signb = B"1";
	mac_mult6.aclr[] = ( aclr3, aclr2, aclr1, aclr0);
	mac_mult6.clk[] = ( clock3, clock2, clock1, clock0);
	mac_mult6.dataa[17..0] = dataa[63..46];
	mac_mult6.datab[17..0] = datab[63..46];
	mac_mult6.ena[] = ( ena3, ena2, ena1, ena0);
	mac_mult6.signa = B"1";
	mac_mult6.signb = B"1";
	mac_mult7.aclr[] = ( aclr3, aclr2, aclr1, aclr0);
	mac_mult7.clk[] = ( clock3, clock2, clock1, clock0);
	mac_mult7.dataa[] = ( dataa[45..32], B"0000");
	mac_mult7.datab[17..0] = datab[63..46];
	mac_mult7.ena[] = ( ena3, ena2, ena1, ena0);
	mac_mult7.signa = B"1";
	mac_mult7.signb = B"1";
	mac_mult8.aclr[] = ( aclr3, aclr2, aclr1, aclr0);
	mac_mult8.clk[] = ( clock3, clock2, clock1, clock0);
	mac_mult8.dataa[17..0] = dataa[63..46];
	mac_mult8.datab[] = ( datab[45..32], B"0000");
	mac_mult8.ena[] = ( ena3, ena2, ena1, ena0);
	mac_mult8.signa = B"1";
	mac_mult8.signb = B"1";
	mac_mult9.aclr[] = ( aclr3, aclr2, aclr1, aclr0);
	mac_mult9.clk[] = ( clock3, clock2, clock1, clock0);
	mac_mult9.dataa[] = ( dataa[45..32], B"0000");
	mac_mult9.datab[] = ( datab[45..32], B"0000");
	mac_mult9.ena[] = ( ena3, ena2, ena1, ena0);
	mac_mult9.signa = B"1";
	mac_mult9.signb = B"1";
	mac_out10.aclr[] = ( aclr3, aclr2, aclr1, aclr0);
	mac_out10.clk[] = ( clock3, clock2, clock1, clock0);
	mac_out10.dataa[] = mac_mult6.dataout[];
	mac_out10.datab[] = mac_mult7.dataout[];
	mac_out10.datac[] = mac_mult8.dataout[];
	mac_out10.datad[] = mac_mult9.dataout[];
	mac_out10.ena[] = ( ena3, ena2, ena1, ena0);
	mac_out10.signa = B"1";
	mac_out10.signb = B"1";
	mac_out5.aclr[] = ( aclr3, aclr2, aclr1, aclr0);
	mac_out5.clk[] = ( clock3, clock2, clock1, clock0);
	mac_out5.dataa[] = mac_mult1.dataout[];
	mac_out5.datab[] = mac_mult2.dataout[];
	mac_out5.datac[] = mac_mult3.dataout[];
	mac_out5.datad[] = mac_mult4.dataout[];
	mac_out5.ena[] = ( ena3, ena2, ena1, ena0);
	mac_out5.signa = B"1";
	mac_out5.signb = B"1";
	aclr0 = GND;
	aclr1 = GND;
	aclr2 = GND;
	aclr3 = GND;
	clock0 = VCC;
	clock1 = VCC;
	clock2 = VCC;
	clock3 = VCC;
	ena0 = VCC;
	ena1 = VCC;
	ena2 = VCC;
	ena3 = VCC;
	global_gnd = B"0";
	global_vcc = B"1";
	result[31..0] = w86w[31..0];
	sb_reg[] = B"1";
	w86w[] = ( add_sub11.result[64..0]);
END;
--VALID FILE
